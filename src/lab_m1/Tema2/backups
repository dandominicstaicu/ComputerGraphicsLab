in update:
    // // Render the 1st box
    // glm::mat4 modelMatrix = glm::mat4(1);

    // // Translate to the drone's position
    // modelMatrix = glm::translate(modelMatrix, dronePosition);

    // // Scale to make it a rectangular parallelepiped
    // modelMatrix = glm::scale(modelMatrix, glm::vec3(3.0f, 0.25f, 0.15f)); // Width: 3, Height: 0.25, Depth: 0.15

    // shaders["Simple"]->Use();
    // glUniform3f(glGetUniformLocation(shaders["Simple"]->GetProgramID(), "object_color"), 0.5f, 0.5f, 0.5f); // Black color
    // RenderMesh(meshes["box"], shaders["Simple"], modelMatrix);

    
    // // Render the second box (vertical box)
    // glm::mat4 modelMatrix2 = glm::mat4(1);

    // // Translate to the same position as the first box
    // modelMatrix2 = glm::translate(modelMatrix2, dronePosition);

    // // Rotate 90 degrees around the Z-axis
    // modelMatrix2 = glm::rotate(modelMatrix2, glm::radians(90.0f), glm::vec3(0, 1, 0));

    // // Scale to the same dimensions as the first box
    // modelMatrix2 = glm::scale(modelMatrix2, glm::vec3(3.0f, 0.25f, 0.15f));

    // glUniform3f(glGetUniformLocation(shaders["Simple"]->GetProgramID(), "object_color"), 0.5f, 0.5f, 0.5f); // Black color
    // RenderMesh(meshes["box"], shaders["Simple"], modelMatrix2);

    // // Render small cubes at the ends of the horizontal box
    // glm::mat4 smallCube1 = glm::mat4(1);
    // smallCube1 = glm::translate(smallCube1, dronePosition + glm::vec3(1.5f, 0, 0)); // End of the horizontal box
    // smallCube1 = glm::scale(smallCube1, glm::vec3(0.3f, 0.3f, 0.3f)); // Small cube dimensions
    // RenderMesh(meshes["box"], shaders["Simple"], smallCube1);

    // glm::mat4 smallCube2 = glm::mat4(1);
    // smallCube2 = glm::translate(smallCube2, dronePosition - glm::vec3(1.5f, 0, 0)); // Other end of the horizontal box
    // smallCube2 = glm::scale(smallCube2, glm::vec3(0.3f, 0.3f, 0.3f));
    // RenderMesh(meshes["box"], shaders["Simple"], smallCube2);

    // // Render small cubes at the ends of the vertical box
    // glm::mat4 smallCube3 = glm::mat4(1);
    // smallCube3 = glm::translate(smallCube3, dronePosition + glm::vec3(0, 0, 1.5f)); // End of the vertical box
    // smallCube3 = glm::scale(smallCube3, glm::vec3(0.3f, 0.3f, 0.3f));
    // RenderMesh(meshes["box"], shaders["Simple"], smallCube3);

    // glm::mat4 smallCube4 = glm::mat4(1);
    // smallCube4 = glm::translate(smallCube4, dronePosition - glm::vec3(0, 0, 1.5f)); // Other end of the vertical box
    // smallCube4 = glm::scale(smallCube4, glm::vec3(0.3f, 0.3f, 0.3f));
    // RenderMesh(meshes["box"], shaders["Simple"], smallCube4);

    //     // Render pillars above each small cube
    // glm::mat4 pillar1 = glm::mat4(1);
    // pillar1 = glm::translate(pillar1, dronePosition + glm::vec3(1.5f, 0.3f, 0)); // Above the small cube
    // pillar1 = glm::scale(pillar1, glm::vec3(0.1f, 0.3f, 0.1f)); // Narrow base, tall height
    // RenderMesh(meshes["box"], shaders["Simple"], pillar1);

    // glm::mat4 pillar2 = glm::mat4(1);
    // pillar2 = glm::translate(pillar2, dronePosition - glm::vec3(1.5f, -0.3f, 0)); // Above the small cube
    // pillar2 = glm::scale(pillar2, glm::vec3(0.1f, 0.3f, 0.1f));
    // RenderMesh(meshes["box"], shaders["Simple"], pillar2);

    // glm::mat4 pillar3 = glm::mat4(1);
    // pillar3 = glm::translate(pillar3, dronePosition + glm::vec3(0, 0.3f, 1.5f)); // Above the small cube
    // pillar3 = glm::scale(pillar3, glm::vec3(0.1f, 0.3f, 0.1f));
    // RenderMesh(meshes["box"], shaders["Simple"], pillar3);

    // glm::mat4 pillar4 = glm::mat4(1);
    // pillar4 = glm::translate(pillar4, dronePosition - glm::vec3(0, -0.3f, 1.5f)); // Above the small cube
    // pillar4 = glm::scale(pillar4, glm::vec3(0.1f, 0.3f, 0.1f));
    // RenderMesh(meshes["box"], shaders["Simple"], pillar4);

    // // Render propellers above each pillar
    // glm::mat4 propeller1 = glm::mat4(1);
    // propeller1 = glm::translate(propeller1, dronePosition + glm::vec3(1.5f, 0.45f, 0)); // Top of pillar1
    // propeller1 = glm::scale(propeller1, glm::vec3(0.6f, 0.05f, 0.1f)); // Thin and wide
    // RenderMesh(meshes["box"], shaders["Simple"], propeller1);

    // glm::mat4 propeller2 = glm::mat4(1);
    // propeller2 = glm::translate(propeller2, dronePosition - glm::vec3(1.5f, -0.45f, 0)); // Top of pillar2
    // propeller2 = glm::scale(propeller2, glm::vec3(0.6f, 0.05f, 0.1f));
    // RenderMesh(meshes["box"], shaders["Simple"], propeller2);

    // glm::mat4 propeller3 = glm::mat4(1);
    // propeller3 = glm::translate(propeller3, dronePosition + glm::vec3(0, 0.45f, 1.5f)); // Top of pillar3
    // propeller3 = glm::scale(propeller3, glm::vec3(0.6f, 0.05f, 0.1f));
    // RenderMesh(meshes["box"], shaders["Simple"], propeller3);

    // glm::mat4 propeller4 = glm::mat4(1);
    // propeller4 = glm::translate(propeller4, dronePosition - glm::vec3(0, -0.45f, 1.5f)); // Top of pillar4
    // propeller4 = glm::scale(propeller4, glm::vec3(0.6f, 0.05f, 0.1f));
    // RenderMesh(meshes["box"], shaders["Simple"], propeller4);




















    this is the project now:
tema2.cpp:
#include "lab_m1/Tema2/tema2.h"

#include <vector>
#include <string>
#include <iostream>
#include <random>
#include <ctime>

using namespace std;
using namespace m1;


/*
 *  To find out more about `FrameStart`, `Update`, `FrameEnd`
 *  and the order in which they are called, see `world.cpp`.
 */


Tema2::Tema2()
{
}


Tema2::~Tema2()
{
    // Clean up obstacles
    for(auto& obstacle : obstacles)
    {
        delete obstacle;
    }
    obstacles.clear();

    // Clean up camera
    delete camera;
}


void Tema2::Init()
{
    camera = new implemented::CameraT2();
    camera->Set(glm::vec3(0, 2, 3.5f), glm::vec3(0, 1, 0), glm::vec3(0, 1, 0));

    projectionMatrix = glm::perspective(RADIANS(60), window->props.aspectRatio, Z_NEAR, Z_FAR);

    // Load Box Mesh for Buildings
    {
        Mesh* mesh = new Mesh("box");
        mesh->LoadMesh(PATH_JOIN(window->props.selfDir, RESOURCE_PATH::MODELS, "primitives"), "box.obj");
        meshes[mesh->GetMeshID()] = mesh;
    }

    // Load Cylinder Mesh for Trunk
    {
        Mesh* cylinder = new Mesh("cylinder");
        cylinder->LoadMesh(PATH_JOIN(window->props.selfDir, RESOURCE_PATH::MODELS, "custom"), "cylinder.obj");
        meshes[cylinder->GetMeshID()] = cylinder;
    }

    // Load Cone Mesh for Foliage
    {
        Mesh* cone = new Mesh("cones");
        cone->LoadMesh(PATH_JOIN(window->props.selfDir, RESOURCE_PATH::MODELS, "custom"), "cones.obj");
        meshes[cone->GetMeshID()] = cone;
    }

    // Load Shaders
    {
        Shader* droneShader = new Shader("DroneShader");
        droneShader->AddShader(PATH_JOIN(window->props.selfDir, SOURCE_PATH::M1, "Tema2", "shaders", "DroneVertexShader.glsl"), GL_VERTEX_SHADER);
        droneShader->AddShader(PATH_JOIN(window->props.selfDir, SOURCE_PATH::M1, "Tema2", "shaders", "DroneFragmentShader.glsl"), GL_FRAGMENT_SHADER);
        if (!droneShader->CreateAndLink())
        {
            std::cerr << "Failed to create and link DroneShader.\n";
        }
        shaders[droneShader->GetName()] = droneShader;
    }

    {
        Shader* terrainShader = new Shader("TerrainShader");
        terrainShader->AddShader(PATH_JOIN(window->props.selfDir, SOURCE_PATH::M1, "Tema2", "shaders", "TerrainVertexShader.glsl"), GL_VERTEX_SHADER);
        terrainShader->AddShader(PATH_JOIN(window->props.selfDir, SOURCE_PATH::M1, "Tema2", "shaders", "TerrainFragmentShader.glsl"), GL_FRAGMENT_SHADER);
        if (!terrainShader->CreateAndLink())
        {
            std::cerr << "Failed to create and link TerrainShader.\n";
        }
        shaders[terrainShader->GetName()] = terrainShader;
    }

    {
        Shader* obstacleShader = new Shader("ObstacleShader");
        obstacleShader->AddShader(PATH_JOIN(window->props.selfDir, SOURCE_PATH::M1, "Tema2", "shaders", "ObstacleVertexShader.glsl"), GL_VERTEX_SHADER);
        obstacleShader->AddShader(PATH_JOIN(window->props.selfDir, SOURCE_PATH::M1, "Tema2", "shaders", "ObstacleFragmentShader.glsl"), GL_FRAGMENT_SHADER);
        if (!obstacleShader->CreateAndLink())
        {
            std::cerr << "Failed to create and link ObstacleShader.\n";
        }
        shaders[obstacleShader->GetName()] = obstacleShader;
    }

    int gridResolution = 86;

    // Initialize the Drone class
    drone.Init(meshes, shaders, shaders["DroneShader"], this);

    // Initialize the terrain
    terrain.GenerateGrid(gridResolution, gridResolution); 

    meshes["terrain"] = terrain.GetMesh();

    // Procedurally generate obstacles
    const float minDistance = 7.0f;    
    const float terrainHalfSize = gridResolution / 2.0f;
    std::mt19937 rng(static_cast<unsigned int>(std::time(nullptr)));
    std::uniform_real_distribution<float> distPos(-terrainHalfSize + 10.0f, terrainHalfSize - 10.0f);

    // Separate scale distributions for trees and buildings
    std::uniform_real_distribution<float> distScaleTrees(10.0f, 25.0f);      // For trees
    std::uniform_real_distribution<float> distScaleBuildings(10.0f, 15.0f);  // For buildings

    std::vector<glm::vec3> placedPositions;

    const int numTrees = 35;
    const int numBuildings = 8;

    const int maxPlacementAttempts = 100; // Maximum attempts to place an obstacle

    // 1) Generate TREES
    for (int i = 0; i < numTrees; ++i)
    {
        bool positionOK = false;
        glm::vec3 pos;
        float scale;
        int attempts = 0;

        while (!positionOK && attempts < maxPlacementAttempts)
        {
            pos = glm::vec3(distPos(rng), 0.0f, distPos(rng));
            scale = distScaleTrees(rng);

            // Ensure no overlap with existing obstacles
            positionOK = true;
            for (const auto& existingPos : placedPositions)
            {
                if (CalculateDistance(pos, existingPos) < minDistance)
                {
                    positionOK = false;
                    break;
                }
            }

            attempts++;
        }

        if (positionOK)
        {
            placedPositions.emplace_back(pos);
            Obstacle* tree = new Obstacle(meshes, shaders, shaders["ObstacleShader"], pos, scale);
            obstacles.push_back(tree);
        }
        else
        {
            std::cerr << "Failed to place tree " << i + 1 << " after " << maxPlacementAttempts << " attempts.\n";
        }
    }

    // 2) Generate BUILDINGS
    for (int i = 0; i < numBuildings; ++i)
    {
        bool positionOK = false;
        glm::vec3 pos;
        float scale;
        int attempts = 0;

        while (!positionOK && attempts < maxPlacementAttempts)
        {
            pos = glm::vec3(distPos(rng), 0.0f, distPos(rng));
            scale = distScaleBuildings(rng);

            // Ensure no overlap with existing obstacles
            positionOK = true;
            for (const auto& existingPos : placedPositions)
            {
                if (CalculateDistance(pos, existingPos) < minDistance)
                {
                    positionOK = false;
                    break;
                }
            }

            attempts++;
        }

        if (positionOK)
        {
            placedPositions.emplace_back(pos);
            Building* building = new Building(meshes, shaders, shaders["ObstacleShader"], pos, scale);
            obstacles.push_back(building);
        }
        else
        {
            std::cerr << "Failed to place building " << i + 1 << " after " << maxPlacementAttempts << " attempts.\n";
        }
    }
}



void Tema2::FrameStart()
{
    glEnable(GL_DEPTH_TEST);
    

    // Clears the color buffer (using the previously set color) and depth buffer
    glClearColor(0.1f, 0.3f, 0.5f, 1); 
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

    glm::ivec2 resolution = window->GetResolution();
    // Sets the screen area where to draw
    glViewport(0, 0, resolution.x, resolution.y);
}


void Tema2::Update(float deltaTimeSeconds)
{
    // Update the drone state
    drone.Update(deltaTimeSeconds);

    // Render the drone
    drone.Render(camera->GetViewMatrix(), projectionMatrix);

    // Render the terrain
    RenderMesh(terrain.GetMesh(), shaders["TerrainShader"], glm::mat4(1));

    // Render all obstacles
    for(auto& obstacle : obstacles) {
        obstacle->Render(camera->GetViewMatrix(), projectionMatrix);
    }


}


void Tema2::FrameEnd()
{
    DrawCoordinateSystem(camera->GetViewMatrix(), projectionMatrix);
}


void Tema2::RenderMesh(Mesh * mesh, Shader * shader, const glm::mat4 & modelMatrix)
{
    if (!mesh || !shader || !shader->program)
        return;

    shader->Use();
    glUniformMatrix4fv(glGetUniformLocation(shader->GetProgramID(), "model"), 1, GL_FALSE, glm::value_ptr(modelMatrix));
    glUniformMatrix4fv(glGetUniformLocation(shader->GetProgramID(), "view"), 1, GL_FALSE, glm::value_ptr(camera->GetViewMatrix()));
    glUniformMatrix4fv(glGetUniformLocation(shader->GetProgramID(), "projection"), 1, GL_FALSE, glm::value_ptr(projectionMatrix));


    mesh->Render();
}

/*
 *  These are callback functions. To find more about callbacks and
 *  how they behave, see `input_controller.h`.
 */


void Tema2::OnInputUpdate(float deltaTime, int mods)
{
    // move the camera only if MOUSE_RIGHT button is pressed
    if (window->MouseHold(GLFW_MOUSE_BUTTON_RIGHT))
    {
        float cameraSpeed = 6.0f;

        if (window->KeyHold(GLFW_KEY_W)) {
            camera->TranslateForward(cameraSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_A)) {
            camera->TranslateRight(-cameraSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_S)) {
            camera->TranslateForward(-cameraSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_D)) {
            camera->TranslateRight(cameraSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_Q)) {
            camera->TranslateUpward(cameraSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_E)) {
            camera->TranslateUpward(-cameraSpeed * deltaTime);
        }
    }

    float droneSpeed = 2.0f;
    float rotationSpeed = 90.0f; // Degrees per second

    if (!window->MouseHold(GLFW_MOUSE_BUTTON_RIGHT)) {
        // Translate along local axes
        if (window->KeyHold(GLFW_KEY_W)) {
            // Move forward along Oz
            drone.MoveForward(droneSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_S)) {
            // Move backward along Oz
            drone.MoveBackward(droneSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_D)) {
            // Move right along Ox
            drone.MoveRight(droneSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_A)) {
            // Move left along Ox
            drone.MoveLeft(droneSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_Q)) {
            // Move up along Oy
            drone.MoveUp(droneSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_E)) {
            // Move down along Oy
            drone.MoveDown(droneSpeed * deltaTime);
        }

        // Rotate around Oy
        if (window->KeyHold(GLFW_KEY_LEFT)) {
            drone.RotateLeft(rotationSpeed * deltaTime);
        }

        if (window->KeyHold(GLFW_KEY_RIGHT)) {
            drone.RotateRight(rotationSpeed * deltaTime);

        }
    }

}


void Tema2::OnKeyPress(int key, int mods)
{
    // Add key press event
    if (key == GLFW_KEY_T)
    {
    }

}


void Tema2::OnKeyRelease(int key, int mods)
{
    // Add key release event
}


void Tema2::OnMouseMove(int mouseX, int mouseY, int deltaX, int deltaY)
{
    // Add mouse move event

    if (window->MouseHold(GLFW_MOUSE_BUTTON_RIGHT))
    {
        float sensivityOX = 0.001f;
        float sensivityOY = 0.001f;

        if (window->GetSpecialKeyState() == 0) {
            camera->RotateFirstPerson_OX(-sensivityOX * deltaY);
            camera->RotateFirstPerson_OY(-sensivityOY * deltaX);
        }

        if (window->GetSpecialKeyState() & GLFW_MOD_CONTROL) {

        }
    }
}


void Tema2::OnMouseBtnPress(int mouseX, int mouseY, int button, int mods)
{
    // Add mouse button press event
}


void Tema2::OnMouseBtnRelease(int mouseX, int mouseY, int button, int mods)
{
    // Add mouse button release event
}


void Tema2::OnMouseScroll(int mouseX, int mouseY, int offsetX, int offsetY)
{
}


void Tema2::OnWindowResize(int width, int height)
{
}

float Tema2::CalculateDistance(const glm::vec3& a, const glm::vec3& b)
{
    return glm::distance(glm::vec2(a.x, a.z), glm::vec2(b.x, b.z));
}

tema2.h:
#pragma once

#include "components/simple_scene.h"
#include "lab_m1/Tema2/t2_camera.h"
#include "lab_m1/Tema2/drone.h"
#include "lab_m1/Tema2/terrain.h"
#include "lab_m1/Tema2/obstacle.h"
#include "lab_m1/Tema2/building.h"

#define Z_FAR		(200.f)
#define Z_NEAR		(.01f)

namespace m1
{
   class Obstacle; 

    class Tema2 : public gfxc::SimpleScene
    {
     public:
        Tema2();
        ~Tema2();

        void Init() override;

     private:
        void FrameStart() override;
        void Update(float deltaTimeSeconds) override;
        void FrameEnd() override;


        void OnInputUpdate(float deltaTime, int mods) override;
        void OnKeyPress(int key, int mods) override;
        void OnKeyRelease(int key, int mods) override;
        void OnMouseMove(int mouseX, int mouseY, int deltaX, int deltaY) override;
        void OnMouseBtnPress(int mouseX, int mouseY, int button, int mods) override;
        void OnMouseBtnRelease(int mouseX, int mouseY, int button, int mods) override;
        void OnMouseScroll(int mouseX, int mouseY, int offsetX, int offsetY) override;
        void OnWindowResize(int width, int height) override;

         float CalculateDistance(const glm::vec3& a, const glm::vec3& b);


         Drone drone;
         Terrain terrain;
         std::vector<Obstacle*> obstacles; // Vector to store obstacles

     protected:
        implemented::CameraT2 *camera;
        glm::mat4 projectionMatrix;

   public:
      void RenderMesh(Mesh *mesh, Shader *shader, const glm::mat4 &modelMatrix) override;

    };
}   // namespace m1

obstacle.cpp:
#include "lab_m1/Tema2/obstacle.h"

namespace m1
{
    Obstacle::Obstacle(const std::unordered_map<std::string, Mesh*>& meshes,
                       const std::unordered_map<std::string, Shader*>& shaders,
                       Shader* shader,
                       const glm::vec3& position,
                       float scale)
        : shader(shader), position(position), scale(scale)
    {
        // My model exported from OnShape is rotated 90 degrees around the X axis
        float rotationAngle = glm::radians(-90.0f); // Convert degrees to radians

        {
            // Trunk: Cylinder (Brown Color)
            Mesh* trunkMesh = meshes.at("cylinder"); // Use "cylinder" mesh
            glm::mat4 trunkModel = glm::translate(glm::mat4(1.0f), position);
            trunkModel = glm::rotate(trunkModel, rotationAngle, glm::vec3(1.0f, 0.0f, 0.0f)); // Rotate to align with Y-axis
            trunkModel = glm::scale(trunkModel, glm::vec3(scale * 0.2f, scale * 0.2f, scale * .38f));
            components.emplace_back(trunkMesh, trunkModel);
            componentColors.emplace_back(glm::vec3(0.55f, 0.27f, 0.07f)); // Brown color
        }
    
        {
            // Foliage: Cone (Green Color)
            Mesh* foliageMesh = meshes.at("cones"); // Use "cones" mesh
            glm::mat4 foliageModel = glm::translate(glm::mat4(1.0f), position + glm::vec3(0.0f, scale * 0.09f, 0.0f));
            foliageModel = glm::rotate(foliageModel, rotationAngle, glm::vec3(1.0f, 0.0f, 0.0f)); // Rotate to align with Y-axis
            foliageModel = glm::scale(foliageModel, glm::vec3(scale, scale, scale));
            components.emplace_back(foliageMesh, foliageModel);
            componentColors.emplace_back(glm::vec3(0.0f, 0.8f, 0.0f)); // Green color
        }
    }

    Obstacle::~Obstacle()
    {
        // No dynamic memory to clean up
    }

    void Obstacle::Render(const glm::mat4& viewMatrix, const glm::mat4& projectionMatrix)
    {
        shader->Use();
        for(size_t i = 0; i < components.size(); ++i)
        {
            Mesh* mesh = components[i].first;
            glm::mat4 modelMatrix = components[i].second;
            glm::vec3 color = componentColors[i];

            glUniformMatrix4fv(glGetUniformLocation(shader->GetProgramID(), "model"), 1, GL_FALSE, glm::value_ptr(modelMatrix));
            glUniformMatrix4fv(glGetUniformLocation(shader->GetProgramID(), "view"), 1, GL_FALSE, glm::value_ptr(viewMatrix));
            glUniformMatrix4fv(glGetUniformLocation(shader->GetProgramID(), "projection"), 1, GL_FALSE, glm::value_ptr(projectionMatrix));

            // Set object color
            glUniform3fv(glGetUniformLocation(shader->GetProgramID(), "objectColor"), 1, glm::value_ptr(color));

            mesh->Render();
        }
    }
}

obstacle.h:
#pragma once

#include <unordered_map>
#include "core/gpu/mesh.h"
#include <glm/glm.hpp>
#include <vector>
#include "components/simple_scene.h"

namespace m1
{
    class Obstacle
    {
    public:
        Obstacle(const std::unordered_map<std::string, Mesh*>& meshes, const std::unordered_map<std::string, Shader*>& shaders, Shader* shader, const glm::vec3& position, float scale);
        ~Obstacle();

        void Render(const glm::mat4& viewMatrix, const glm::mat4& projectionMatrix);

        // Get the position and scale for collision detection
        glm::vec3 GetPosition() const { return position; }
        float GetScale() const { return scale; }

    protected:
        std::vector<std::pair<Mesh*, glm::mat4>> components; // Each component mesh and its model matrix
        std::vector<glm::vec3> componentColors;
        
    private:
        Shader* shader;
        glm::vec3 position;
        float scale;
    };
}

building.cpp:
#include "lab_m1/Tema2/building.h"

namespace m1
{
    Building::Building(const std::unordered_map<std::string, Mesh*>& meshes,
                       const std::unordered_map<std::string, Shader*>& shaders,
                       Shader* shader,
                       const glm::vec3& position,
                       float scale)
        : Obstacle(meshes, shaders, shader, position, scale)
    {
        // Since the base Obstacle constructor sets up "tree" components,
        // we clear them here to define our own "building" geometry.
        components.clear();
        componentColors.clear();

        // Use the "box" mesh to represent the building
        Mesh* boxMesh = meshes.at("box");

        // Position it on the ground, scale it, etc.
        glm::mat4 buildingModel = glm::translate(glm::mat4(1.0f), position);
        buildingModel = glm::scale(buildingModel, glm::vec3(scale * 0.35f));

        // Add one component (the box) and make it grey
        components.emplace_back(boxMesh, buildingModel);
        componentColors.emplace_back(glm::vec3(0.5f, 0.5f, 0.5f));  // Grey color
    }

    Building::~Building()
    {
        // No dynamic memory to clean up
    }
}

building.h:
#pragma once

#include "lab_m1/Tema2/obstacle.h"

namespace m1
{
    class Building : public Obstacle
    {
    public:
        Building(const std::unordered_map<std::string, Mesh*>& meshes,
                 const std::unordered_map<std::string, Shader*>& shaders,
                 Shader* shader,
                 const glm::vec3& position,
                 float scale);
        ~Building();
    };
}


